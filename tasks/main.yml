---

- name: Install common packages
  package: name={{ item }} state=present
  with_items:
    - python-pip
    - unzip
    - git

- name: Install PyCurl
  apt: name=python-pycurl state=present
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


- name: Install Java for RHEL Dists
  package: name=java-1.8.0-openjdk state=present
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Add apt repository for openjdk
  apt_repository:
    repo: 'ppa:openjdk-r/ppa'
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install Java for Ubuntu Dists
  apt: name=openjdk-8-jre-headless state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Create cortex group
  group:
    name: cortex
    state: present

- name: Create cortex user
  user:
    name: cortex
    comment: "Cortex Service Account"
    group: cortex

- name: Make sure run directories exist
  file:
    path: /var/run/cortex
    owner: cortex
    state: directory

- name: Get Installer for hive and cortex {{ thehive.version }}
  get_url:
    url: https://dl.bintray.com/cert-bdf/thehive/thehive-cortex-{{ thehive.version }}.zip
    dest: "{{ cortex.install_prefix }}/thehive-cortex-{{ thehive.version }}.zip"
    mode: 0440

- name: Checkout Cortex Analyzers git forcefully
  git:
    repo: https://github.com/CERT-BDF/Cortex-Analyzers
    dest: "{{ cortex.install_prefix }}/Cortex-Analyzers"
    force: yes
  when: "{{ cortex.be_destructive }}"

- name: Checkout Cortex Analyzers git
  git:
    repo: https://github.com/CERT-BDF/Cortex-Analyzers
    dest: "{{ cortex.install_prefix }}/Cortex-Analyzers"
    update: no
  when: not {{ cortex.be_destructive }}

- name: Remove Bad analyzers
  file:
    path: "{{ cortex.install_prefix }}/{{ cortex.analyzer.path }}/{{ item }}"
    state: absent
    force: yes
  with_items: "{{ cortex.remove_analyzers }}"
  when: cortex.remove_analyzers is defined
  notify: restart cortex

- name: Install Python Cortex Extensions
  pip:
    name: cortexutils

- name: Install Additional Python Modules
  pip:
    name: "{{ item }}"
  with_items: "{{ cortex.python_modules }}"

- name: Extract files
  unarchive:
    src: "{{ cortex.install_prefix }}/thehive-cortex-{{ thehive.version }}.zip"
    dest: "{{ cortex.install_prefix }}/"
    creates: "{{ cortex.install_prefix }}/thehive-{{ thehive.version }}"
    remote_src: True

- name: chown cortex directory
  file:
    dest: "{{ cortex.install_prefix }}/cortex-{{ cortex.version }}"
    state: directory
    owner: cortex
    group: cortex
    recurse: yes

- name: Make a symlink for Cortex
  file:
    src: "{{ cortex.install_prefix }}/cortex-{{ cortex.version }}"
    dest: "{{ cortex.install_prefix }}/cortex"
    state: link

- name: Make an etc directory for Cortex
  file:
    path: /etc/cortex
    owner: cortex
    group: cortex
    state: directory
    mode: 0770

- name: Copy in systemd init script for Cortex
  template:
    src: 'cortex.service.j2'
    dest: /etc/systemd/system/cortex.service
  notify: reload systemd
  when: ansible_service_mgr == 'systemd'

- name: Copy in upstart init script for Cortex
  template:
    src: 'cortex.conf.j2'
    dest: /etc/init/cortex.conf
  when: ansible_service_mgr == 'upstart'

- name: Copy in sysvinit script for Cortex
  template:
    src: 'cortex.j2'
    dest: /etc/init.d/cortex
  when: ansible_service_mgr == 'sysvinit'

- name: Copy in test config
  template:
    src: 'application.conf.j2'
    dest: '/etc/cortex/application.conf'
  notify: restart cortex


- name: Enable services for systemd
  service: name=cortex state=started enabled=true daemon_reload=yes
  when: ansible_service_mgr == 'systemd'

- name: Enable services for upstart
  service: name=cortex state=started enabled=true
  when: ansible_service_mgr == 'upstart'

- name: Enable services for sysvinit
  service: name=cortex state=started enabled=true
  when: ansible_service_mgr == 'sysvinit'
